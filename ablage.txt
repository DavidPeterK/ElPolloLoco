    CSS

#startScreen {
    width: 720px; /* Breite des Canvas */
    height: 480px; /* Höhe des Canvas */
    background-color: rgba(0,0,0,0.7);
    position: absolute;
    display: flex;
    justify-content: center;
    align-items: center;
    color: white;
    font-size: 24px;
    cursor: pointer;
  }

/* Vollbild-spezifische Styles */
:fullscreen #myCanvas,
:-webkit-full-screen #myCanvas,
:-moz-full-screen #myCanvas,
:-ms-fullscreen #myCanvas {
    /* Diese Regel behält das Seitenverhältnis des Canvas bei und passt es maximal in den Bildschirm ein. */
    max-width: 100%;
    max-height: 100%;
    margin: auto; /* Zentriert den Canvas */
}

/* Vollbild-spezifische Styles */
:fullscreen #startScreen,
:-webkit-full-screen #startScreen,
:-moz-full-screen #startScreen,
:-ms-fullscreen #startScreen {
    width: 720px;
    /* Breite des Canvas */
    height: 480px;
    /* Höhe des Canvas */
    margin: auto;
    /* Zentriert den Startbildschirm im Vollbildmodus */
}

checkCollisionsWithCollectible() {
    let collectibles = [...this.world.level.salsaBottle, ...this.world.level.coin];

    collectibles.forEach((collectible, index) => {
        if (this.charTouchCollectible(collectible)) { // Nehmen wir an, diese Funktion gibt true zurück, wenn eine Kollision vorliegt
            // Nehmen Sie an, dass Sie das Sammelobjekt durch null ersetzen möchten
            if (this.world.level.salsaBottle.includes(collectible)) {
                let bottleIndex = this.world.level.salsaBottle.indexOf(collectible);
                this.world.level.salsaBottle[bottleIndex] = null; // Ersetzt das Sammelobjekt durch null
            } else if (this.world.level.coin.includes(collectible)) {
                let coinIndex = this.world.level.coin.indexOf(collectible);
                this.world.level.coin[coinIndex] = null; // Ersetzt das Sammelobjekt durch null
            }
            // Hier können Sie weitere Aktionen hinzufügen, z.B. das Aktualisieren des Spieler-Scores
        }
    });
}

checkCollisionsWithEnemy() {
    let enemies = [this.world.endBoss, ...this.world.level.chicken];

    enemies.forEach((enemy, index) => {
        if (this.charTouchEnemy(enemy)) { // Nehmen wir an, diese Funktion gibt true zurück, wenn eine Kollision vorliegt
            // Nehmen wir an, dass Sie auf eine Kollision mit einem Gegner reagieren möchten
            // Hier können Sie Code hinzufügen, um z.B. das Spiel zu beenden, Lebenspunkte abzuziehen etc.
        }
    });
}





// Toggle-Funktion für Overlays
function toggleDisplay(elementId) {
    let element = document.getElementById(elementId);
    element.style.display = (element.style.display === 'block') ? 'none' : 'block';
}



// Funktion zum Anzeigen des Ladescreens
function showLoadingScreen() {
    document.getElementById('loading-screen').style.display = 'block';
}

// Funktion zum Ausblenden des Ladescreens
function hideLoadingScreen() {
    document.getElementById('loading-screen').style.display = 'none';
}
function enterFullScreen(element) {
    if (element.requestFullscreen) {
        element.requestFullscreen();
    } else if (element.mozRequestFullScreen) { /* Firefox */
        element.mozRequestFullScreen();
    } else if (element.webkitRequestFullscreen) { /* Chrome, Safari & Opera */
        element.webkitRequestFullscreen();
    } else if (element.msRequestFullscreen) { /* IE/Edge */
        element.msRequestFullscreen();
    }
}





    checkCollisions() {
        setInterval(() => {
            this.level.chicken.forEach((chickens, index) => {
                if (chickens !== null) {
                    if (this.level.chicken[index].isDead()) {
                        setTimeout((currentIndex) => {
                            this.level.chicken[currentIndex] = null;
                        }, 1400, index);
                    } else if (!chickens.isDead()) {
                        this.collisionDirection(chickens, index);
                    }
                }
            });
            this.level.endboss.forEach((endBoss, index) => {
                if (endBoss !== null) {
                    this.collisionDirection(endBoss, index);
                }
            });
            if (this instanceof Character) {
                this.level.coin.forEach((coins, index) => {
                    if (coins !== null) {
                        this.collisionDirection(coins, index);
                    }
                });
                this.level.salsaBottle.forEach((salsaBottles, index) => {
                    if (salsaBottles !== null) {
                        this.collisionDirection(salsaBottles, index);
                    }
                });
            }
        }, 1000 / 40);
    }
034716841586